<?xml version="1.0"?>
<robot name="plane" xmlns:xacro="http://www.ros.org/wiki/xacro">

<xacro:property name="source" value="$(find last_letter_2)/config/param/aircrafts/csl_2k19/rigidBody.yaml" />
<xacro:property name="dictionary" value="${load_yaml(source)}"/>
<xacro:property name="mass" value="${dictionary['airframe/m']}"/>
    
<!-- body, airfoil sizes -->
<xacro:property name="body_s" value="1" />   
<xacro:property name="airfoil_s" value="1" />

<!-- body link , body_height, body_rad, body_mass -->
<xacro:property name="body_h" value="${2.5*body_s}" />
<xacro:property name="body_r" value="${0.5*body_s}" />
<xacro:property name="body_m" value="${0.3*mass}" />

    <!-- only body_FLU acceptable name for base_link -->
    <link name="body_FLU">
        <visual>
            <origin rpy="0 -${pi/2} 0 " />
            <geometry>
                <cylinder radius="${body_r}" length="${body_h}" />
            </geometry>
        </visual>

        <collision>
            <origin rpy="0 -${pi/2} 0 " />
            <geometry>
                <cylinder radius="${body_r}" length="${body_h}" />
            </geometry>
        </collision>

        <inertial>
            <origin rpy="0 -${pi/2} 0 " />
            <mass value="${body_m}" />
            <inertia    ixx="${1/12*(3*body_r*body_r+body_h*body_h)*body_m}" ixy="0" ixz="0" iyz="0"
                        iyy="${1/12*(3*body_r*body_r+body_h*body_h)*body_m}"
                        izz="${1/2*body_m*body_r*body_r}" />
        </inertial>

        <sensor name='my_contact' type='contact'>
          <contact>
            <collision>box_collision</collision>
          </contact>
        </sensor>
        
    </link>

    ----------------------------------------------------------------------------  airfoils
<!-- airfoil1 link parameters , x, y, z, mass-->
<xacro:property name="airfoil_x" value="${airfoil_s/2}" />
<xacro:property name="airfoil_y" value="${airfoil_s*6}" />
<xacro:property name="airfoil_z" value="${airfoil_s/10}"/>
<xacro:property name="airfoil_m" value="${0.3*mass}" />               ----airfoil mass
    
    <!-- only airfoil(Number_0f_Airfoil) acceptable name for airfoils -->
    <link name="airfoil1">
        <visual>
            <geometry>
                <box size="${airfoil_x} ${airfoil_y} ${airfoil_z}" />
            </geometry>
        </visual>

        <collision>
            <geometry>
                <box size="${airfoil_x} ${airfoil_y} ${airfoil_z}" />
            </geometry>
        </collision>

         <inertial>
            <mass value="${airfoil_m}" />
            <inertia    ixx="${1/12*airfoil_m*(airfoil_y*airfoil_y+airfoil_z*airfoil_z)}" ixy="0" ixz="0" iyz="0"
                        iyy="${1/12*airfoil_m*(airfoil_x*airfoil_x+airfoil_z*airfoil_z)}" 
                        izz="${1/12*airfoil_m*(airfoil_x*airfoil_x+airfoil_y*airfoil_y)}" />
        </inertial>
    </link>
    
    <joint name="body_FLU_to_airfoil1" type="revolute">
        <origin xyz="0 0 0" rpy ="0 0 0"/>
        <parent link="body_FLU" />
        <child link="airfoil1" />
        <limit effort="1000.0" velocity="0.5"/>   ---default limits upper=lower=0
    </joint>


    ----------------------------------------------------------------------------------- motors
<!-- motor link -->
<!-- motor parameters , x, y, z, mass -->
<xacro:property name="motor_x" value="${body_s/10}" />
<xacro:property name="motor_y" value="${body_s/5}" />
<xacro:property name="motor_z" value="${body_s/5}" />
<xacro:property name="motor_m" value="${0.3*mass}" />

<!-- only motor(Number_0f_Motor) acceptable name for motors -->
 <link name="motor1">
        <visual>
            <origin xyz="${0.5*motor_x} 0 0"/>
            <geometry>
                <box size="${motor_x} ${motor_y} ${motor_z}" />
            </geometry>
        </visual>

        <collision>
            <origin xyz="${0.5*motor_x} 0 0"/>
            <geometry>
                <box size="${motor_x} ${motor_y} ${motor_z}" />
            </geometry>
        </collision>

        <inertial>
            <origin xyz="${0.5*motor_x} 0 0"/>
            <mass value="${motor_m}" />
            <inertia    ixx="${1/12*motor_m*(motor_y*motor_y+motor_z*motor_z)}" ixy="0" ixz="0" iyz="0"
                        iyy="${1/12*motor_m*(motor_x*motor_x+motor_z*motor_z)}" 
                        izz="${1/12*motor_m*(motor_x*motor_x+motor_y*motor_y)}" />
        </inertial>
    </link>

    <joint name="body_FLU_to_motor1" type="revolute">
        <origin xyz="${0.5*body_h} 0 0" rpy="0 0 0" />
        <limit effort="1000.0" velocity="0.5"/>
        <parent link="body_FLU" />
        <child link="motor1" />
    </joint>

 -----------------------------------------------------------------------------------propeller
<!-- axle link parameters height, rad, mass-->
<xacro:property name="axle_h" value="${body_h/12}" />
<xacro:property name="axle_r" value="${body_r/10}" />
<xacro:property name="axle_m" value="${0.005*mass}" />
    
    <link name="axle1">
        <visual>
            <origin xyz="${axle_h/2} 0 0" rpy="0 ${pi/2} 0"/>
            <geometry>
                <cylinder radius="${axle_r}" length="${axle_h}" />
            </geometry>
        </visual>

        <collision>
            <origin xyz="${axle_h/2} 0 0" rpy="0 ${pi/2} 0"/>
            <geometry>
                <cylinder radius="${axle_r}" length="${axle_h}" />
            </geometry>
        </collision>

        <inertial>
            <origin xyz="${axle_h/2} 0 0" />
            <mass value="${axle_m}" />
            <inertia    ixx="${1/12*axle_m*axle_h*axle_h+1/4*axle_m*axle_r*axle_r}" ixy="0" ixz="0" iyz="0"
                        iyy="${1/12*axle_m*axle_h*axle_h+1/4*axle_m*axle_r*axle_r}" 
                        izz="${1/2*axle_m*axle_r*axle_r}" />
        </inertial>
    </link>

    <joint name="motor1_to_axle1" type="continuous">
        <origin xyz="${motor_x} 0 0" rpy="0 0 0" />
        <axis xyz="1 0 0" />
        <parent link="motor1" />
        <child link="axle1" />
    </joint>

<!-- propeller link parameters x, y, z, mass -->
<xacro:property name="propeller_x" value="${0.8*body_s}" />
<xacro:property name="propeller_y" value="${0.2*body_s}" />
<xacro:property name="propeller_z" value="${0.05*body_s}" />
<xacro:property name="propeller_m" value="${0.015*mass}" />

    
    <link name="propeller1">
        <visual>
            <geometry>
                <box size="${propeller_x} ${propeller_y} ${propeller_z}" />
            </geometry>
        </visual>

        <collision>
            <geometry>
                <box size="${propeller_x} ${propeller_y} ${propeller_z}" />
            </geometry>
        </collision>

        <inertial>
            <mass value="${propeller_m}" />
           <inertia     ixx="${1/12*propeller_m*(propeller_y*propeller_y+propeller_z*propeller_z)}" ixy="0" ixz="0" iyz="0"
                        iyy="${1/12*propeller_m*(propeller_x*propeller_x+propeller_z*propeller_z)}" 
                        izz="${1/12*propeller_m*(propeller_x*propeller_x+propeller_y*propeller_y)}" />
        </inertial>

    </link>

    <joint name="axle1_to_propeller1" type="fixed">
        <origin xyz="${axle_h} 0 0" rpy="0 ${pi/2} 0" />
        <parent link="axle1" />
        <child link="propeller1" />
    </joint>
    
     ---------------------------------------------------------------------------front wheels
     
     <!-- wheel_base_link parameters, x, y, z, mass-->
<xacro:property name="wheel_base_x" value="${0.05*body_s}" />
<xacro:property name="wheel_base_y" value="${2*body_s}" />
<xacro:property name="wheel_base_z" value="${0.05*body_s}" />
<xacro:property name="wheel_base_m" value="${0.05*mass}" />

    <link name="wheel_base">
        <visual>
            <geometry>
                <box size="${wheel_base_x} ${wheel_base_y} ${wheel_base_z}" />
            </geometry>
        </visual>

        <collision>
            <geometry>
                <box size="${wheel_base_x} ${wheel_base_y} ${wheel_base_z}" />
            </geometry>
        </collision>

        <inertial>
            <mass value="${wheel_base_m}" />
            <inertia    ixx="${1/12*wheel_base_m*(wheel_base_y*wheel_base_y+wheel_base_z*wheel_base_z)}" ixy="0" ixz="0" iyz="0"
                        iyy="${1/12*wheel_base_m*(wheel_base_x*wheel_base_x+wheel_base_z*wheel_base_z)}" 
                        izz="${1/12*wheel_base_m*(wheel_base_x*wheel_base_x+wheel_base_y*propeller_y)}" />
        </inertial>

    </link>

    <joint name=" body_FLU_to_wheel_base" type="fixed">
        <origin xyz="${0.4*body_h} 0 -${body_r}" rpy="0 0 0" />
        <parent link="body_FLU" />
        <child link="wheel_base" />
    </joint>

<!-- left wheel link parameters, rad, height, mass-->
<xacro:property name="left_wheel_r" value="${0.3*body_s}" />
<xacro:property name="left_wheel_h" value="${0.1*body_s}" />
<xacro:property name="left_wheel_m" value="${0.01*mass}" />

    <link name="left_wheel">
        <visual>
            <origin xyz="0 0 ${left_wheel_h/2}" />
            <geometry>
                <cylinder radius="${left_wheel_r}" length="${left_wheel_h}" />
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 ${left_wheel_h/2}" />
            <geometry>
                <cylinder radius="${left_wheel_r}" length="${left_wheel_h}" />
            </geometry>
        </collision>

        <inertial>
            <origin xyz="0 0 ${left_wheel_h/2}" />
            <mass value="${left_wheel_m}" />
           <inertia     ixx="${1/12*left_wheel_m*left_wheel_h*left_wheel_h+1/4*left_wheel_m*left_wheel_r*left_wheel_r}" ixy="0" ixz="0" iyz="0"
                        iyy="${1/12*left_wheel_m*left_wheel_h*left_wheel_h+1/4*left_wheel_m*left_wheel_r*left_wheel_r}" 
                        izz="${1/2*left_wheel_m*left_wheel_r*left_wheel_r}" />
        </inertial>
    </link>

    <joint name="wheel_base_to_left_wheel" type="continuous">
        <origin xyz="0 -${wheel_base_y/2} 0" rpy="${pi/2} 0 0" />
        <parent link="wheel_base" />
        <child link="left_wheel" />
        <axis xyz=" 0 0 1" />
    </joint>

<!-- right wheel link parameters rad, height, mass-->
<xacro:property name="right_wheel_r" value="${left_wheel_r}" />
<xacro:property name="right_wheel_h" value="${left_wheel_h}" />
<xacro:property name="right_wheel_m" value="${left_wheel_m}" />

    <link name="right_wheel">
        <visual>
            <origin xyz="0 0 -${right_wheel_h/2}" />
            <geometry>
                <cylinder radius="${right_wheel_r}" length="${right_wheel_h}" />
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 -${right_wheel_h/2}" />
            <geometry>
                <cylinder radius="${right_wheel_r}" length="${right_wheel_h}" />
            </geometry>
        </collision>

        <inertial>
            <origin xyz="0 0 -${right_wheel_h/2}" />
           <mass value="${right_wheel_m}" />
           <inertia     ixx="${1/12*right_wheel_m*right_wheel_h*right_wheel_h+1/4*right_wheel_m*right_wheel_r*right_wheel_r}" ixy="0" ixz="0" iyz="0"
                        iyy="${1/12*right_wheel_m*right_wheel_h*right_wheel_h+1/4*right_wheel_m*right_wheel_r*right_wheel_r}" 
                        izz="${1/2*right_wheel_m*right_wheel_r*right_wheel_r}" />
        </inertial>
    </link>

    <joint name="wheel_base_to_right_wheel" type="continuous">
        <origin xyz="0 ${wheel_base_y/2} 0" rpy="${pi/2} 0 0" />
        <parent link="wheel_base" />
        <child link="right_wheel" />
        <axis xyz=" 0 0 1" />
    </joint>

    ------------------------------------------------------------------------------------ rear sphere wheel
<!-- rear wheel link parameters, rad, mass -->
<xacro:property name="rear_wheel_m" value="${body_m/2}" />
<xacro:property name="rear_wheel_r" value="${0.01*mass}" />

    <link name="rear_wheel">
        <visual>
            <geometry>
                <sphere radius="${rear_wheel_r}" />
            </geometry>
        </visual>

        <collision>
            <geometry>
                <sphere radius="${rear_wheel_r}" />
            </geometry>
        </collision>

        <inertial>
            <mass value="${rear_wheel_m}" />
            <inertia    ixx="${2/5*rear_wheel_m*rear_wheel_r*rear_wheel_r}" ixy="0" ixz="0" iyz="0"
                        iyy="${2/5*rear_wheel_m*rear_wheel_r*rear_wheel_r}"
                        izz="${2/5*rear_wheel_m*rear_wheel_r*rear_wheel_r}" />
        </inertial>
    </link>

    <joint name="body_FLU_to_rear_wheel" type="continuous">
        <origin xyz="-${0.4*body_h} 0 -${body_r}" />
        <axis xyz="0 1 0"/>
        <parent link="body_FLU" />
        <child link="rear_wheel" />
    </joint>
    
    <joint name="camera_joint" type="revolute">
    <axis xyz="0 1 0" />
    <origin xyz="0 ${airfoil_y/2-0.1} -0.1" rpy="0 0 -0.6"/>
    <parent link="airfoil1"/>
    <child link="camera_link"/>
    <limit effort="1000.0" velocity="0.5"/>   ---default limits upper=lower=0
  </joint>

  <!-- Camera -->
  <link name="camera_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="0.2 0.2 0.2"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="0.2 0.2 0.2"/>
      </geometry>
      <material name="red"/>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <joint name="hokuyo_joint" type="revolute">
    <axis xyz="0 1 0" />
    <origin xyz="${body_h+0.2} 0 0" rpy="0 .2 0"/>
    <parent link="body_FLU"/>
    <child link="hokuyo_link"/>
    <limit effort="1000.0" velocity="0.5"/>   ---default limits upper=lower=0
  </joint>

  <!-- Hokuyo Laser -->
  <link name="hokuyo_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

<!-- model plugins -->
    <gazebo>
        <plugin name="model_plugin" filename="libmodel_plugin.so"/>
        <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
            <jointName>body_FLU_to_airfoil1, body_FLU_to_motor1, motor1_to_axle1, wheel_base_to_left_wheel, wheel_base_to_right_wheel, body_FLU_to_rear_wheel, hokuyo_joint, camera_joint </jointName>
            <robotNamespace>last_letter_2</robotNamespace>
            <updateRate>0</updateRate>
        </plugin>
    </gazebo>

<!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>rrbot/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

 <!-- hokuyo -->
  <gazebo reference="hokuyo_link">
    <sensor type="ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.1</min>
          <max>30.0</max>
          <resolution>0.1</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/rrbot/laser/scan</topicName>
        <frameName>hokuyo_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

   <gazebo reference="body_FLU">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>__default_topic__</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>body_FLU</bodyName>
        <updateRateHZ>10.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>body_FLU</frameName>
      </plugin>
      <pose>0 0 -${body_r+0.01} 0 0 0</pose>
    </sensor>
  </gazebo>

</robot>